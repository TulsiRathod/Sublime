1.
#include<bits/stdc++.h>
using namespace std;

void solve(){
    int arr[5][3][4];
    int cnt=1;
    for(int i{0};i<5;i++){
        for(int j{0};j<3;j++){
            for(int l{0};l<4;l++){
                arr[i][j][l]=cnt++;
            }
        }
    }
    for(int i{0};i<5;i++){
        for(int j{0};j<3;j++){
            for(int l{0};l<4;l++){
                cout<<arr[i][j][l]<<" ";
            }
            cout<<endl;
        }
        cout<<endl;
    }
    //declare 3d pointer
    int (*p)[3][4]=arr;
    cout<<*(*(*p))<<endl;

    //declare row pointer
    // int (*rowp)[4]=arr[0];
    int (*rowp)[4]=*p;
    cout<<*(*rowp)<<endl;
}

int32_t main(){
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif  
    // TEST
    solve();
    return 0;
}

/////////////////////////////////////////////////////////////
2.
#include<bits/stdc++.h>
using namespace std;

struct circle{
    float radius;
    double area;
};

circle** createCircle(const int& n){
    circle** c=new circle*[n];
    for(int i{0};i<n;i++){
        *(c+i)=new circle;
    }
    return c;
}

void editRadius(circle* const* const &p,const int &n){
    for(int i{0};i<n;i++){
        (*(p+i))->radius=rand()%100;
    }
}

void calculateArea(circle* const* const &p,const int &n){
    for(int i{0};i<n;i++){
        (*(p+i))->area=(*(p+i))->radius*(*(p+i))->radius*3.14285;
    }
}

void display(const circle* const* const &p,const int &n){
    for(int i{0};i<n;i++){
        cout<<"Radius : "<<(*(p+i))->radius<<"  2Area : "<<(*(p+i))->area<<endl;
    }
}

void deleteCircle(const circle* const* p,const int &n){
    for(int i{0};i<n;i++){
        delete *(p+i);
    }
    delete[] p;
    p=nullptr;
}

void solve(){
    auto circles=createCircle(10);
    editRadius(circles,10);
    calculateArea(circles,10);
    display(circles,10);
    deleteCircle(circles,10);
}

int32_t main(){
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif  
    // TEST
    solve();
    return 0;
}


//////////////////////////////////////////////////////////
 
3.

#include<bits/stdc++.h>
using namespace std;

struct student{
    int rollno;
    string name;
    int cpi;

    student(int rollno,string name,int cpi){
        this->rollno=rollno;
        this->name=name;
        this->cpi=cpi;
    }
    student(){
        rollno=0;
        name="";
        cpi=0; 
    }
};

struct compareCPI{
    bool operator()(const student* s1,const student* s2){
        return s1->cpi>s2->cpi;
    }
};

void solve(){
    student* s1=new student(1,"tulsi",9);
    student* s2=new student(2,"manish",8);
    compareCPI c;
    cout<<c(s1,s2);
}

int32_t main(){
    SPEED
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif  
    // TEST
    solve();
    return 0;
}


////////////////////////////////////////////////////////////////
4.
#include<bits/stdc++.h>
using namespace std;

void longWord(const char* s){
    const char* p{s};
    int temp=0,ans=0;
    while(*p!='\0'){
        if(*p!=' '){
            temp++;   
        }else{
            temp=0;   
        }
        ans=max(ans,temp);
        *p++;
    }
    cout<<ans;
}

void solve(){
    char str[100];
    cin.getline(str,100);
    longWord(str);
}

int32_t main(){
    SPEED
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif  
    // TEST
    solve();
    return 0;
}


///////////////////////////////////////////////////////////////////
5.
#include<bits/stdc++.h>
using namespace std;

enum class RCTYPE{
    REG,
    HSRP
};

struct RC{
    RCTYPE type;
    union{
        const char *regular;
        int id;
    };
};

void solve(){
    RC r1;
    r1.type=RCTYPE::HSRP;
    r1.id=12345;

    RC r2;
    r2.type=RCTYPE::REG;
    r2.regular="Regular";

    if(r1.type==RCTYPE::REG){
        cout<<"Regular Plate : "<<r1.regular<<endl;
    }else{
        cout<<"Number Plate : "<<r1.id<<endl;
    }

    if(r2.type==RCTYPE::REG){
        cout<<"Regular Plate : "<<r2.regular<<endl;
    }else{
        cout<<"Number Plate : "<<r2.id<<endl;
    }
}

int32_t main(){
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif  
    // TEST
    solve();
    return 0;
}


/////////////////////////////////////////////////////////////////
6.
void solve(){
    int m[3][3]{{20,-10,20},{20,20,20},{-10,-20,20}};
    int rs[3]{0},cs[3]{0},sum=0;
    for(int i{0};i<3;i++){
        for(int j{0};j<3;j++){
            sum+=m[i][j];
            cs[j]+=m[i][j];
            rs[i]+=m[i][j];
            cout<<m[i][j]<<" ";
        }
        cout<<rs[i];
        endll
    }
    for(int j{0};j<3;j++){
        cout<<cs[j]<<" ";
    }
    cout<<sum<<endl;
}


/////////////////////////////////////////////////////////////////
7.
void solve(){
    int m[3][3]{{20,-10,20},{20,20,20},{-10,-20,20}};
    int rs[3]{0},cs[3]{0},sum=0;
    for(int i{0};i<3;i++){
        for(int j{0};j<3;j++){
            sum+=m[i][j];
            cs[j]+=m[i][j];
            rs[i]+=m[i][j];
            cout<<m[i][j]<<" ";
        }
        cout<<rs[i];
        endll
    }
    for(int j{0};j<3;j++){
        cout<<cs[j]<<" ";
    }
    cout<<sum<<endl;
}


////////////////////////////////////////////////////////////////
8.

void solve(){
    char input[][50] {"Little bigger than medium",
                      "Small",
                      "This is longest string of all",
                      "Medium string"};
    char str[4][50];
    for(int i{0};i<4;i++){
        for(int j{i+1};j<4;j++){
            if(strlen(input[i])>strlen(input[j])){
                char temp[50];
                strcpy(temp,input[i]);
                strcpy(input[i],input[j]);
                strcpy(input[j],temp);
            }
        }
    }
    for(int i{0};i<4;i++){
        strcpy(str[i],input[i]);
        cout<<str[i]<<endl;
    }
    
}

//////////////////////////////////////////////////////////////
9.
struct student{
    int rollno;
    string name;
};

void solve(){
    student ** s{new student *[10]};
    for(int i{0};i<10;i++){
        *(s+i)=new student();
    }
    for(int i{0};i<10;i++){
        delete *(s+i);
        *(s+i)=nullptr;
    }
    delete []s;
    s=nullptr;
    cout<<"Complete"<<endl;
}

//////////////////////////////////////////////////////////////
10.
#include<bits/stdc++.h>
using namespace std;

struct square{
    int l;
    int area;
};

square** createSquare(const int &n){
    square** p=new square*[n];
    for(int i{0};i<n;i++){
        (*(p+i))=new square();
        (*(p+i))->l = rand() % 100;
        (*(p+i))->area = ((*(p+i))->l) * ((*(p+i))->l);
    }
    return p;
}

void sortSquareByArea(square** const &p,const int &n){
    for(int i{0};i<n;i++){
        for(int j{i+1};j<n;j++){
            if(((*(p+i))->area)>(*(p+j))->area){
                square *temp=*(p+i);
                *(p+i)=*(p+j);
                *(p+j)=temp;
            }
        }
    }
}

void display(const square* const* const &p,const int &n){
    for(int i{0};i<n;i++){
        cout<<"Side : "<<(*(p+i))->l<<"  area : "<<(*(p+i))->area<<endl;
    }
}

void solve(){
    auto squares=createSquare(5);
    display(squares,5);
    sortSquareByArea(squares,5);
    cout<<endl;
    display(squares,5);
}

int32_t main(){
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif  
    // TEST
    solve();
    return 0;
}